import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

// Массивы данных для генерации
const lastNames = [
  'Иванов',
  'Петров',
  'Сидоров',
  'Смирнов',
  'Кузнецов',
  'Попов',
  'Васильев',
  'Соколов',
  'Михайлов',
  'Новиков',
  'Федоров',
  'Морозов',
  'Волков',
  'Алексеев',
  'Лебедев',
  'Семенов',
  'Егоров',
  'Павлов',
  'Козлов',
  'Степанов',
  'Николаев',
  'Орлов',
  'Андреев',
  'Макаров',
  'Никитин',
  'Захаров',
  'Зайцев',
  'Соловьев',
  'Борисов',
  'Яковлев',
  'Григорьев',
  'Романов',
  'Киселев',
  'Ильин',
  'Максимов',
  'Поляков',
  'Сорокин',
  'Виноградов',
  'Ковалев',
  'Белов',
  'Медведев',
  'Антонов',
  'Тарасов',
  'Жуков',
  'Баранов',
  'Филиппов',
  'Комаров',
  'Давыдов',
  'Беляев',
  'Герасимов',
  'Богданов',
];

const firstNames = [
  'Александр',
  'Алексей',
  'Андрей',
  'Антон',
  'Артем',
  'Борис',
  'Вадим',
  'Валентин',
  'Василий',
  'Виктор',
  'Владимир',
  'Вячеслав',
  'Георгий',
  'Дмитрий',
  'Евгений',
  'Иван',
  'Игорь',
  'Максим',
  'Михаил',
  'Николай',
  'Олег',
  'Павел',
  'Петр',
  'Роман',
  'Сергей',
  'Анна',
  'Елена',
  'Мария',
  'Наталья',
  'Ольга',
  'Светлана',
  'Татьяна',
  'Юлия',
  'Екатерина',
  'Ирина',
  'Людмила',
  'Галина',
  'Валентина',
  'Нина',
  'Любовь',
  'Вера',
  'Надежда',
  'Лариса',
  'Тамара',
  'Константин',
  'Леонид',
  'Станислав',
  'Анатолий',
  'Юрий',
  'Денис',
  'Кирилл',
  'Семен',
  'Федор',
  'Матвей',
  'Даниил',
  'Егор',
];

const patronomic = [
  'Иванович',
  'Петрович',
  'Сидорович',
  'Смирнович',
  'Кузнецович',
  'Попович',
  'Васильевич',
  'Соколович',
  'Михайлович',
  'Новикович',
  'Федорович',
  'Морозович',
  'Волкович',
  'Алексеевич',
  'Лебедевич',
  'Семенович',
  'Егорович',
  'Павлович',
  'Козлович',
  'Степанович',
  'Николаевич',
  'Орлович',
  'Андреевич',
  'Макарович',
  'Никитович',
  'Захарович',
  'Зайцевич',
  'Соловьевич',
  'Борисович',
  'Яковлевич',
  'Григорьевич',
  'Романович',
  'Киселевич',
  'Ильинич',
  'Максимович',
  'Полякович',
  'Сорокинович',
  'Виноградович',
  'Николаевич',
  'Белович',
  'Михаилович',
  'Антонович',
  'Тарасович',
  'Жукович',
  'Филиппович',
  'Давыдович',
  'Беляевич',
  'Герасимович',
  'Богданович',
];

const bookNames = [
  'Война и мир',
  'Преступление и наказание',
  'Анна Каренина',
  'Мастер и Маргарита',
  'Евгений Онегин',
  'Мертвые души',
  'Отцы и дети',
  'Герой нашего времени',
  'Идиот',
  'Братья Карамазовы',
  'Доктор Живаго',
  'Тихий Дон',
  'Собачье сердце',
  'Белая гвардия',
  'Двенадцать стульев',
  'Золотой теленок',
  'Человек-амфибия',
  'Алые паруса',
  'Дети капитана Гранта',
  'Граф Монте-Кристо',
  'Три мушкетера',
  'Гарри Поттер и философский камень',
  'Властелин колец',
  'Хоббит',
  'Дюна',
  'Автостопом по галактике',
  '1984',
  'О дивный новый мир',
  'Над пропастью во ржи',
  'Убить пересмешника',
  'Великий Гэтсби',
  'Гордость и предубеждение',
  'Джейн Эйр',
  'Грозовой перевал',
  'Граф Дракула',
  'Франкенштейн',
  'Остров сокровищ',
  'Алиса в стране чудес',
  'Шерлок Холмс',
  'Агата Кристи',
  'Код да Винчи',
  'Основы программирования',
  'JavaScript для начинающих',
  'Python в действии',
  'Изучаем React',
  'Node.js руководство',
  'Базы данных MySQL',
  'Linux системы',
  'Веб-дизайн основы',
  'Машинное обучение',
  'Искусственный интеллект',
  'Капитанская дочка',
  'Ревизор',
  'Горе от ума',
  'Что делать?',
  'Обломов',
  'Гроза',
  'Бесы',
  'Подросток',
  'Униженные и оскорбленные',
  'Записки из подполья',
  'Игрок',
  'Бедные люди',
  'Село Степанчиково',
  'Дядя Ваня',
  'Вишневый сад',
  'Чайка',
  'Три сестры',
  'Палата №6',
  'Дама с собачкой',
  'Человек в футляре',
  'Крыжовник',
  'О любви',
  'Студент',
  'Попрыгунья',
  'Анна на шее',
  'Ионыч',
  'Архангельск - город воинской славы',
  'История России',
  'Всемирная история',
  'География мира',
  'Физика 10 класс',
  'Химия 11 класс',
  'Биология человека',
  'Математический анализ',
  'Алгебра и геометрия',
  'Дискретная математика',
  'Теория вероятностей',
  'Статистика',
  'Экономическая теория',
  'Менеджмент',
  'Маркетинг основы',
  'Бухгалтерский учет',
  'Финансы и кредит',
  'Правоведение',
  'Конституционное право',
  'Гражданское право',
  'Уголовное право',
  'Философия',
  'Логика',
  'Этика',
  'Эстетика',
  'Культурология',
  'Социология',
  'Политология',
  'Психология личности',
  'Социальная психология',
  'Педагогика',
  'Методика преподавания',
  'Английский язык',
  'Немецкий язык',
  'Французский язык',
  'Китайский язык',
  'Японский язык',
  'Литература 19 века',
  'Современная литература',
  'Зарубежная литература',
  'Древняя литература',
  'Поэзия Серебряного века',
  'Советская литература',
  'Детская литература',
  'Научная фантастика',
  'Детективная литература',
  'Приключенческая литература',
  'Исторические романы',
  'Любовные романы',
  'Биографические книги',
  'Мемуары',
  'Путевые заметки',
  'Кулинарные книги',
  'Книги о здоровье',
  'Спортивная литература',
  'Автомобильная литература',
  'Техническая документация',
  'Справочники и словари',
];

const publishers = [
  'АСТ',
  'Эксмо',
  'Росмэн',
  'Дрофа',
  'Просвещение',
  'Азбука',
  'Питер',
  'БХВ-Петербург',
  "О'Рейли",
  'Вильямс',
  'ДМК Пресс',
  'Альпина Паблишер',
  'Манн, Иванов и Фербер',
  'Феникс',
  'Рипол Классик',
  'Захаров',
  'Молодая гвардия',
  'Художественная литература',
  'Детская литература',
  'Мир книги',
];

const genres = [
  'Художественная литература',
  'Классика',
  'Детективы',
  'Фантастика',
  'Фэнтези',
  'Романы',
  'Поэзия',
  'Драматургия',
  'Техническая литература',
  'Программирование',
  'Научная литература',
  'Учебники',
  'Справочники',
  'Биографии',
  'История',
  'Философия',
  'Психология',
  'Экономика',
  'Право',
  'Медицина',
  'Естественные науки',
  'Искусство',
  'Спорт',
  'Путешествия',
  'Кулинария',
];

const streets = [
  'ул. Ленина',
  'ул. Пушкина',
  'ул. Гагарина',
  'ул. Советская',
  'ул. Мира',
  'ул. Центральная',
  'ул. Школьная',
  'ул. Садовая',
  'пр. Победы',
  'ул. Молодежная',
  'ул. Комсомольская',
  'ул. Строителей',
  'ул. Рабочая',
  'ул. Набережная',
  'ул. Лесная',
  'ул. Полевая',
  'ул. Дружбы',
  'ул. Новая',
  'ул. Первомайская',
  'ул. Кирова',
];

const cities = [
  'Москва',
  'Санкт-Петербург',
  'Казань',
  'Нижний Новгород',
  'Екатеринбург',
  'Самара',
  'Омск',
  'Челябинск',
  'Ростов-на-Дону',
  'Уфа',
  'Красноярск',
  'Воронеж',
  'Пермь',
  'Волгоград',
  'Краснодар',
  'Саратов',
  'Тюмень',
  'Тольятти',
  'Ижевск',
  'Барнаул',
];

const statuses = ['Активный', 'Заблокирован', 'Временно отключен'];
const categories = ['Студент', 'Преподаватель', 'Пенсионер', 'Обычный читатель', 'VIP'];

// Вспомогательные функции
function getRandomElement(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

function getRandomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function getRandomDate(start, end) {
  const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
  return date.toISOString().split('T')[0];
}

function generatePhoneNumber() {
  return `+7${getRandomInt(100, 999)}${getRandomInt(100, 999)}${getRandomInt(10, 99)}${getRandomInt(
    10,
    99,
  )}`;
}

// Функция для генерации уникальных названий книг
function generateBookName(index) {
  if (index < bookNames.length) {
    return bookNames[index];
  } else {
    // Генерируем новые названия, комбинируя существующие
    const baseNames = [
      'История',
      'Основы',
      'Введение в',
      'Практическое руководство по',
      'Теория',
      'Практика',
      'Курс',
      'Учебник по',
      'Справочник',
      'Энциклопедия',
    ];
    const subjects = [
      'математике',
      'физике',
      'химии',
      'биологии',
      'программированию',
      'экономике',
      'философии',
      'истории',
      'литературе',
      'искусству',
      'психологии',
      'социологии',
      'политологии',
      'менеджменту',
      'маркетингу',
    ];

    const baseName = getRandomElement(baseNames);
    const subject = getRandomElement(subjects);
    return `${baseName} ${subject} ${index - bookNames.length + 1}`;
  }
}

async function main() {
  console.log('Процесс удаления...');

  // Очищаем существующие данные
  await prisma.debtM.deleteMany();
  await prisma.bookM.deleteMany();
  await prisma.extraditionM.deleteMany();
  await prisma.readerM.deleteMany();

  console.log('Начало заполнения базы данных...');

  // Создание читателей (150 записей)
  console.log('Создание читателей...');
  const readers = [];
  for (let i = 0; i < 150; i++) {
    const reader = await prisma.readerM.create({
      data: {
        lastName: getRandomElement(lastNames),
        firstName: getRandomElement(firstNames),
        patronomic: getRandomElement(patronomic),
        addressStreet: `${getRandomElement(streets)}, д. ${getRandomInt(1, 200)}`,
        adressCity: getRandomElement(cities),
        phoneNumber: generatePhoneNumber(),
        registratedDate: getRandomDate(new Date(2020, 0, 1), new Date(2024, 11, 31)),
        status: getRandomElement(statuses),
        category: getRandomElement(categories),
      },
    });
    readers.push(reader);
  }

  // Создание книг (150 записей)
  console.log('Создание книг...');
  const books = [];
  for (let i = 0; i < 150; i++) {
    const book = await prisma.bookM.create({
      data: {
        name: generateBookName(i),
        trackingNumber: 1000 + i,
        publicationCount: getRandomInt(500, 100000),
        publisher: getRandomElement(publishers),
        publishedYear: getRandomInt(1945, 2024),
        pagesCount: getRandomInt(30, 1200),
        genere: getRandomElement(genres),
      },
    });
    books.push(book);
  }

  // Создание выдач (150 записей)
  console.log('Создание выдач...');
  const extraditions = [];
  const usedBooks = new Set();

  for (let i = 0; i < 150; i++) {
    // Выбираем книгу, которая еще не была выдана, или используем случайную если все уже выданы
    let book;
    if (usedBooks.size < books.length) {
      do {
        book = getRandomElement(books);
      } while (usedBooks.has(book.id));
      usedBooks.add(book.id);
    } else {
      // Если все книги уже выданы, позволяем повторные выдачи
      book = getRandomElement(books);
    }

    const extraditionDate = getRandomDate(new Date(2022, 0, 1), new Date(2024, 11, 31));
    const shouldHaveRefund = Math.random() > 0.25; // 75% книг возвращены

    const extradition = await prisma.extraditionM.create({
      data: {
        extraditionDate: extraditionDate,
        refundDate: shouldHaveRefund
          ? getRandomDate(new Date(extraditionDate), new Date(2025, 5, 17))
          : null,
        bookId: book.id,
        readerId: getRandomElement(readers).id,
      },
    });
    extraditions.push(extradition);
  }

  // Создание долгов (для невозвращенных книг, максимум 150)
  console.log('Создание долгов...');
  const overdue = extraditions.filter(ext => !ext.refundDate);
  const debtCount = Math.min(150, overdue.length);

  for (let i = 0; i < debtCount; i++) {
    const extradition = overdue[i];
    const debtDate = getRandomDate(new Date(extradition.extraditionDate), new Date(2025, 5, 17));

    await prisma.debtM.create({
      data: {
        date: debtDate,
        extraditionId: extradition.id,
      },
    });
  }

  console.log('Заполнение базы данных завершено!');

  // Выводим статистику
  const readerCount = await prisma.readerM.count();
  const bookCount = await prisma.bookM.count();
  const extraditionCount = await prisma.extraditionM.count();
  const debtCountFinal = await prisma.debtM.count();

  console.log(`Создано:`);
  console.log(`- Читателей: ${readerCount}`);
  console.log(`- Книг: ${bookCount}`);
  console.log(`- Выдач: ${extraditionCount}`);
  console.log(`- Долгов: ${debtCountFinal}`);
  console.log(
    `Общее количество записей: ${readerCount + bookCount + extraditionCount + debtCountFinal}`,
  );
}

main()
  .catch(e => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
